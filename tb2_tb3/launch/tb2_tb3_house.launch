<?xml version="1.0"?>
<launch>
  <arg name="gui"        default="true"/><!-- 开启Gazebo-gui-->
  <arg name="world_file" default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>
<!--设置turtlebot2和turtlebot3的命名空间-->
  <arg name="tb3" default="tb3"/>
  <arg name="tb2" default="tb2"/>
<!--设置turtlebot2的底盘，电池，层叠方式，RGBD摄像头-->
  <arg name="base"       value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"    value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
  <arg name="stacks"     value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->
<!--初始化Gazebo-->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="paused" value="false"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="headless" value="false"/>
    <arg name="world_name" value="$(arg world_file)"/>
  </include>

 <!--加载turtlebot2机器人-->
  <group ns="tb2">
	<!--加载turtlebot2机器人的底盘-->
    <include file="$(find tb2_tb3)/launch/includes/$(arg base).launch.xml">
      <arg name="base" value="$(arg base)"/>
      <arg name="stacks" value="$(arg stacks)"/>
      <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
	  <!--更改turtlebot2机器人的初始位置为（5.5，-4，0）和朝向（逆时针90度）-->
      <arg name="x_pos" value=" 5.5"/>
      <arg name="y_pos" value="-4.0"/>
      <arg name="yaw" value=" 1.57"/>
    </include>
	<!--turtlebot2机器人的状态发布节点-->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="30.0" /><!--发布频率30Hz-->
      <param name="tf_prefix" value="$(arg tb2)" /><!--设置tf变换的命名空间tb2-->
    </node>

    <!-- kinect深度图像转换为伪激光雷达数据 -->
    <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
          args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
      <param name="scan_height" value="10"/><!--设置激光安装高度-->
      <param name="output_frame_id" value="/camera_depth_frame"/><!--深度图像发布的frame-->
      <param name="range_min" value="0.45"/>
	  <!--转换image和scan的话题名称-->
      <remap from="image" to="camera/depth/image_raw"/>
      <remap from="scan" to="scan"/>
    </node>
	<!--设置伪激光图像与turtlebot2的tf转换关系-->
    <node pkg="tf" type="static_transform_publisher" name="scan_to_laser" args="0 0 0 0 0 0 /$(arg tb2)/base_link /camera_depth_frame 100" />
  </group>
 <![CDATA[
<group ns="tb2">
	<!--设置turtlbot3机器人的类型为burger，初始位置（-1.5,2,0)朝向为逆时针0度-->
    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="x_pos" default=" 5.5"/>
    <arg name="y_pos" default="-4.0"/>
    <arg name="z_pos" default="0.0"/>
    <arg name="yaw" default="1.57"/>
    <!--turtlebot3机器人的描述文件参数-->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
	<!--turtlebot3机器人的状态发布节点-->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="30.0" /><!--发布频率30Hz-->
      <param name="tf_prefix" value="$(arg tb2)" /><!--设置tf变换的命名空间tb2-->
    </node>
    
    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf"  args="-urdf -model turtlebot2 -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg yaw) -param robot_description" />
  </group>
 ]]>
<!--加载turtlebot3机器人-->
  <group ns="tb3">
	<!--设置turtlbot3机器人的类型为burger，初始位置（-1.5,2,0)朝向为逆时针0度-->
    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="x_pos" default="-1.5"/>
    <arg name="y_pos" default="2.0"/>
    <arg name="z_pos" default="0.0"/>
    <arg name="tb3_yaw" default="0.0"/>
    <!--turtlebot3机器人的描述文件参数-->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
	<!--turtlebot3机器人的状态发布节点-->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="30.0" /><!--发布频率30Hz-->
      <param name="tf_prefix" value="$(arg tb3)" /><!--设置tf变换的命名空间tb2-->
    </node>
    
    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf"  args="-urdf -model turtlebot3_$(arg model) -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg tb3_yaw) -param robot_description" />
  </group>
  
</launch>
